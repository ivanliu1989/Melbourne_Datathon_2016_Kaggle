if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
install.packages('RODBC')
install.packages("RODBC")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
library(RODBC)
odbcDataSources()
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
odbcDriverConnect()
odbcDataSources()
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
#load ODBC library
library(RODBC)
odbcDataSources()
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
require(Rserve)
Rserve()
Rserve()
install.packages(c("boot", "gtools", "manipulate"))
head(train)
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC);require(ROCR)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
install.packages("manipulate")
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
ound(cor(iris[,1:4]), 2)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
pc
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3])#, col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
plot3d(pc$scores[,1:3], col=iris$Species, main="actual species")
with(iris, table(cluster, Species))
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
A <- matrix(c(1,2,3,4),nrow = 2, byrow = T)
B <- matrix(c(3,4,5,6),nrow = 2, byrow = T)
a <- c(1,2)
b <- c(2,3)
diag(10)
A
B
A*B
A%*%B
A%o%B # AB' A%*%t(B)
crossprod(A,B) # A'B  t(A)%*%A
crossprod(A) # A'A
b
solve(A,b) # A%*%solve(A,b)
solve(A,a) # A%*%solve(A,b)
a <- c(1200:1300)
a
b <- seq(15,100,5)
b
a/b
c <- a/b
c
a/15
apply(b, f(x) a/x)
apply(b, f(x){a/x})
sapply(b, f(x){a/x})
sapply(b, f(x){a/x})
lapply(b, f(x){a/x})
lapply(b, f(x)a/x)
lapply(b, f(x) a/x)
lapply(b,
f(x){
a/x
}
)
?sapply
b
sapply(b, a/x)
sapply(b, mean)
sapply(b, function(x) a/x)
a
x <− c ( 9 : 2 0 , 1 : 5 , 3 : 7 , 0 : 8 )
x <- c( 9 : 2 0 , 1 : 5 , 3 : 7 , 0 : 8 )
x <- c(9:20,1:5,3:7,0:8)
x
(xu<-x[!duplicated(x)])
unique ( x ) # i s more e f f i c i e n t
x[!duplicated(x)]
setwd('/Users/ivanliu/Downloads/datathon2016/Melbourne_Datathon_2016_Kaggle')
setwd('/Users/ivanliu/Downloads/datathon2016/Melbourne_Datathon_2016_Kaggle')
rm(list=ls());gc()
library(data.table)
load('../data/model/total.RData')
source('./rscripts/0.ngram_split_func.R')
text_vector <- total[,'title']
text_vector <- iconv(text_vector, to = 'utf-8', sub=' ')
review_source <- VectorSource(text_vector)
corpus <- Corpus(review_source)
corpus <- tm_map(corpus, content_transformer(tolower), lazy = T)
corpus <- tm_map(corpus, removePunctuation, lazy = T)
corpus <- tm_map(corpus, stripWhitespace, lazy = T)
corpus <- tm_map(corpus, removeWords, stopwords('english'), lazy = T)
corpus <- tm_map(corpus, stemDocument, 'english', lazy = T)
library("RWeka")
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
dtm_bigram <- DocumentTermMatrix(corpus, control = list(tokenize = BigramTokenizer))
library(parallel)
options(mc.cores=1)
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
dtm_bigram <- DocumentTermMatrix(corpus, control = list(tokenize = BigramTokenizer))
ls()
library(Matrix)
dtm_sim <- dtm[,findFreqTerms(dtm,100)] # 5
dtm <- dtm_bigram
dtm_sim <- dtm[,findFreqTerms(dtm,100)] # 5
dtm_sim$j
dtm_sim$i
findFreqTerms(dtm,100)
findFreqTerms(dtm,10)
findFreqTerms(dtm,50)
findFreqTerms(dtm,100)
dtm_sim <- dtm[,findFreqTerms(dtm,100)] # 5
dtm2 <- sparseMatrix(dtm_sim$i,dtm_sim$j,x=dtm_sim$v)
dim(dtm2)
all <- cbind(job_id = total$job_id, dtm2, hat = total$hat)
train <- all[all[,'hat'] != -1, ]
test <- all[all[,'hat'] == -1, ]
colnames(train) <- c('job_id', paste0('var_', 1:(ncol(train)-2)), 'hat')
colnames(test) <- c('job_id', paste0('var_', 1:(ncol(train)-2)), 'hat')
rm_feat <- colSums(test)
test <- test[,rm_feat!=0]
train <- train[,rm_feat!=0]
rm_feat <- colSums(train)
rm_feat
rm_feat!=0
tbale(rm_feat!=0)
table(rm_feat!=0)
save(train,test, file ='../model_bigram_freq_100.RData')
library(xgboost)
library(caret)
library(Matrix)
set.seed(23)
cv <- 10
folds <- createFolds(train[,'hat'], k = cv, list = FALSE)
dropitems <- c('job_id','hat')
feature.names <- colnames(train)[!colnames(train) %in% dropitems]
i=1
f <- folds==i
dval          <- xgb.DMatrix(data=train[f,feature.names],label=train[f,'hat'])
dtrain        <- xgb.DMatrix(data=train[!f,feature.names],label=train[!f,'hat'])
watchlist     <- list(val=dval,train=dtrain)
clf <- xgb.train(data                = dtrain,
nrounds             = 2000,
early.stop.round    = 300,
watchlist           = watchlist,
eval_metric         = 'auc',
# feval                = eval_cus,
maximize            = TRUE,
objective           = "binary:logistic",
booster             = "gbtree", # gblinear
eta                 = 0.3,
max_depth           = 4,
min_child_weight    = 3,
subsample           = .9,
colsample           = .8,
print.every.n       = 100
)
cat(paste0('Iteration: ', i, ' || Score: ', 2*(clf$bestScore-0.5)))
dtm_sim <- dtm[,findFreqTerms(dtm,50)] # 5
dtm2 <- sparseMatrix(dtm_sim$i,dtm_sim$j,x=dtm_sim$v)
dim(dtm2)
all <- cbind(job_id = total$job_id, dtm2, hat = total$hat)
train <- all[all[,'hat'] != -1, ]
test <- all[all[,'hat'] == -1, ]
colnames(train) <- c('job_id', paste0('var_', 1:(ncol(train)-2)), 'hat')
colnames(test) <- c('job_id', paste0('var_', 1:(ncol(train)-2)), 'hat')
# remove features not in test
rm_feat <- colSums(test)
test <- test[,rm_feat!=0]
train <- train[,rm_feat!=0]
rm_feat <- colSums(train)
test <- test[,rm_feat!=0]
train <- train[,rm_feat!=0]
set.seed(23)
cv <- 10
folds <- createFolds(train[,'hat'], k = cv, list = FALSE)
dropitems <- c('job_id','hat')
feature.names <- colnames(train)[!colnames(train) %in% dropitems]
i=1
f <- folds==i
# 1. xgboost 0.94703
dval          <- xgb.DMatrix(data=train[f,feature.names],label=train[f,'hat'])
dtrain        <- xgb.DMatrix(data=train[!f,feature.names],label=train[!f,'hat'])
watchlist     <- list(val=dval,train=dtrain)
clf <- xgb.train(data                = dtrain,
nrounds             = 2000,
early.stop.round    = 300,
watchlist           = watchlist,
eval_metric         = 'auc',
# feval                = eval_cus,
maximize            = TRUE,
objective           = "binary:logistic",
booster             = "gbtree", # gblinear
eta                 = 0.3,
max_depth           = 4,
min_child_weight    = 3,
subsample           = .9,
colsample           = .8,
print.every.n       = 100
)
cat(paste0('Iteration: ', i, ' || Score: ', 2*(clf$bestScore-0.5)))
dtm_sim <- dtm[,findFreqTerms(dtm,3)] # 5
dtm2 <- sparseMatrix(dtm_sim$i,dtm_sim$j,x=dtm_sim$v)
dim(dtm2)
all <- cbind(job_id = total$job_id, dtm2, hat = total$hat)
train <- all[all[,'hat'] != -1, ]
test <- all[all[,'hat'] == -1, ]
colnames(train) <- c('job_id', paste0('var_', 1:(ncol(train)-2)), 'hat')
colnames(test) <- c('job_id', paste0('var_', 1:(ncol(train)-2)), 'hat')
# remove features not in test
rm_feat <- colSums(test)
test <- test[,rm_feat!=0]
train <- train[,rm_feat!=0]
rm_feat <- colSums(train)
test <- test[,rm_feat!=0]
train <- train[,rm_feat!=0]
### Split Data ###
set.seed(23)
cv <- 10
folds <- createFolds(train[,'hat'], k = cv, list = FALSE)
dropitems <- c('job_id','hat')
feature.names <- colnames(train)[!colnames(train) %in% dropitems]
i=1
dim(train)
f <- folds==i
# 1. xgboost 0.94703
dval          <- xgb.DMatrix(data=train[f,feature.names],label=train[f,'hat'])
dtrain        <- xgb.DMatrix(data=train[!f,feature.names],label=train[!f,'hat'])
watchlist     <- list(val=dval,train=dtrain)
clf <- xgb.train(data                = dtrain,
nrounds             = 2000,
early.stop.round    = 300,
watchlist           = watchlist,
eval_metric         = 'auc',
# feval                = eval_cus,
maximize            = TRUE,
objective           = "binary:logistic",
booster             = "gbtree", # gblinear
eta                 = 0.3,
max_depth           = 4,
min_child_weight    = 3,
subsample           = .9,
colsample           = .8,
print.every.n       = 100
)
cat(paste0('Iteration: ', i, ' || Score: ', 2*(clf$bestScore-0.5)))
clf <- xgb.train(data                = dtrain,
nrounds             = 2000,
early.stop.round    = 300,
watchlist           = watchlist,
eval_metric         = 'auc',
# feval                = eval_cus,
maximize            = TRUE,
objective           = "binary:logistic",
booster             = "gbtree", # gblinear
eta                 = 0.3,
max_depth           = 6,
min_child_weight    = 3,
subsample           = .9,
colsample           = .8,
print.every.n       = 100
)
cat(paste0('Iteration: ', i, ' || Score: ', 2*(clf$bestScore-0.5)))
