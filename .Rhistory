";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
odbcDriverConnect()
odbcDataSources()
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
#load ODBC library
library(RODBC)
odbcDataSources()
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
require(Rserve)
Rserve()
Rserve()
install.packages(c("boot", "gtools", "manipulate"))
head(train)
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC);require(ROCR)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
install.packages("manipulate")
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
ound(cor(iris[,1:4]), 2)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
pc
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3])#, col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
plot3d(pc$scores[,1:3], col=iris$Species, main="actual species")
with(iris, table(cluster, Species))
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
A <- matrix(c(1,2,3,4),nrow = 2, byrow = T)
B <- matrix(c(3,4,5,6),nrow = 2, byrow = T)
a <- c(1,2)
b <- c(2,3)
diag(10)
A
B
A*B
A%*%B
A%o%B # AB' A%*%t(B)
crossprod(A,B) # A'B  t(A)%*%A
crossprod(A) # A'A
b
solve(A,b) # A%*%solve(A,b)
solve(A,a) # A%*%solve(A,b)
a <- c(1200:1300)
a
b <- seq(15,100,5)
b
a/b
c <- a/b
c
a/15
apply(b, f(x) a/x)
apply(b, f(x){a/x})
sapply(b, f(x){a/x})
sapply(b, f(x){a/x})
lapply(b, f(x){a/x})
lapply(b, f(x)a/x)
lapply(b, f(x) a/x)
lapply(b,
f(x){
a/x
}
)
?sapply
b
sapply(b, a/x)
sapply(b, mean)
sapply(b, function(x) a/x)
a
x <âˆ’ c ( 9 : 2 0 , 1 : 5 , 3 : 7 , 0 : 8 )
x <- c( 9 : 2 0 , 1 : 5 , 3 : 7 , 0 : 8 )
x <- c(9:20,1:5,3:7,0:8)
x
(xu<-x[!duplicated(x)])
unique ( x ) # i s more e f f i c i e n t
x[!duplicated(x)]
setwd('/Users/ivanliu/Downloads/datathon2016/Melbourne_Datathon_2016_Kaggle')
rm(list=ls());gc()
load('../data/model/total.RData')
# jobs_search <- read.delim('../data/all/job_searches_all.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
total <- total[,c('job_id','class_id', 'hat')]; gc()
# unique(total[,c('class_id','class_description')])
order_id <- total$job_id
#######################
### Tgt user clicks ###
#######################
jobs_click <- read.delim('../data_new/job_clicks_all_V2.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
jobs_click <- read.delim('../data/all/job_clicks_all.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
dim(jobs_click)
job_click_pct <- merge(jobs_click[,c('job_id','user_id')], total[, c('job_id', 'class_id', 'hat')], all.x = T, all.y = F, by = 'job_id')
dim(job_click_pct)
jobs_click <- read.delim('../data_new/job_clicks_all_V2.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
dim(jobs_click)
job_click_pct <- merge(jobs_click[,c('job_id','user_id')], total[, c('job_id', 'class_id', 'hat')], all.x = T, all.y = F, by = 'job_id')
dim(job_click_pct)
job_click_pct <- merge(jobs_click[,c('job_id','user_id')], total[, c('job_id', 'class_id', 'hat')], all.x = T, all.y = F, by = 'job_id')
for(c in unique(total$class_id)[!is.na(unique(total$class_id))]){
feat_name <- paste0('usr_click_',c)
cat(paste0('start creating... ', feat_name, ' \n'))
tgt_user_id <- unique(job_click_pct[job_click_pct$class_id == c,'user_id'])
job_click_pct$tgt_user_num <- ifelse(job_click_pct$user_id %in% tgt_user_id, 1,0)
tgt_user_num <- table(job_click_pct[job_click_pct$tgt_user_num > 0, 'job_id'])
tgt_user_num <- cbind(job_id = as.numeric(names(tgt_user_num)), clicks = as.numeric(tgt_user_num))
colnames(tgt_user_num) <- c('job_id', feat_name)
# save(tgt_user_num, file = '../user_click_freq.RData')
tgt_user_click <- merge(total[,c('job_id','class_id', 'hat')], tgt_user_num, all.x = T, all.y = F, sort = F)
tgt_user_click[is.na(tgt_user_click[,feat_name]), feat_name] <- 0
tgt_user_click <- tgt_user_click[order(match(tgt_user_click$job_id,order_id)),]
total <- merge(total, tgt_user_click, all.x = T, all.y = F, sort = F)
cat(paste0(feat_name, ' finished. # NA: ', table(is.na(tgt_user_click[,feat_name])), '. Range of clicks: ',
range(tgt_user_click[,feat_name])[1], ' ', range(tgt_user_click[,feat_name])[2], '. \n'))
}
feat_name <- paste0('usr_click_',c)
cat(paste0('start creating... ', feat_name, ' \n'))
tgt_user_id <- unique(job_click_pct[job_click_pct$class_id == c,'user_id'])
job_click_pct$tgt_user_num <- ifelse(job_click_pct$user_id %in% tgt_user_id, 1,0)
tgt_user_num <- table(job_click_pct[job_click_pct$tgt_user_num > 0, 'job_id'])
tgt_user_num <- cbind(job_id = as.numeric(names(tgt_user_num)), clicks = as.numeric(tgt_user_num))
colnames(tgt_user_num) <- c('job_id', feat_name)
tgt_user_click <- merge(total[,c('job_id','class_id', 'hat')], tgt_user_num, all.x = T, all.y = F, sort = F)
head(tgt_user_click)
tgt_user_click[is.na(tgt_user_click[,feat_name]), feat_name] <- 0
tgt_user_click <- tgt_user_click[order(match(tgt_user_click$job_id,order_id)),]
total <- merge(total, tgt_user_click, all.x = T, all.y = F, sort = F)
head(tgt_user_click)
head(total)
total <- merge(total, tgt_user_click[,c('job_id',feat_name)], all.x = T, all.y = F, sort = F)
head(tgt_user_click[,c('job_id',feat_name)])
dim(tgt_user_click[,c('job_id',feat_name)])
dim(total)
identical(total$job_id, tgt_user_click[,c('job_id')])
total <- merge(total, tgt_user_click[,c('job_id',feat_name)], all.x = T, all.y = F, sort = F, by = 'job_id')
total$job_id - tgt_user_click$job_id
total <- total[order(match(total$job_id,order_id)),]
total$job_id - tgt_user_click$job_id
identical(total$job_id, tgt_user_click[,c('job_id')])
setwd('/Users/ivanliu/Downloads/datathon2016/Melbourne_Datathon_2016_Kaggle')
rm(list=ls());gc()
load('../data/model/total.RData')
# jobs_search <- read.delim('../data/all/job_searches_all.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
total <- total[,c('job_id','class_id', 'hat')]; gc()
# unique(total[,c('class_id','class_description')])
order_id <- total$job_id
#######################
### Tgt user clicks ###
#######################
jobs_click <- read.delim('../data_new/job_clicks_all_V2.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
# jobs_click <- read.delim('../data/all/job_clicks_all.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
job_click_pct <- merge(jobs_click[,c('job_id','user_id')], total[, c('job_id', 'class_id', 'hat')], all.x = T, all.y = F, by = 'job_id')
for(c in unique(total$class_id)[!is.na(unique(total$class_id))]){
feat_name <- paste0('usr_click_',c)
cat(paste0('start creating... ', feat_name, ' \n'))
tgt_user_id <- unique(job_click_pct[job_click_pct$class_id == c,'user_id'])
job_click_pct$tgt_user_num <- ifelse(job_click_pct$user_id %in% tgt_user_id, 1,0)
tgt_user_num <- table(job_click_pct[job_click_pct$tgt_user_num > 0, 'job_id'])
tgt_user_num <- cbind(job_id = as.numeric(names(tgt_user_num)), clicks = as.numeric(tgt_user_num))
colnames(tgt_user_num) <- c('job_id', feat_name)
# save(tgt_user_num, file = '../user_click_freq.RData')
tgt_user_click <- merge(total[,c('job_id','class_id', 'hat')], tgt_user_num, all.x = T, all.y = F, sort = F)
tgt_user_click[is.na(tgt_user_click[,feat_name]), feat_name] <- 0
tgt_user_click <- tgt_user_click[order(match(tgt_user_click$job_id,order_id)),]
# total <- total[order(match(total$job_id,order_id)),]
total <- cbind(total, tgt_user_click[,feat_name])
cat(paste0(feat_name, ' finished. # NA: ', table(is.na(tgt_user_click[,feat_name])), '. Range of clicks: ',
range(tgt_user_click[,feat_name])[1], ' ', range(tgt_user_click[,feat_name])[2], '. \n'))
}
head(total)
setwd('/Users/ivanliu/Downloads/datathon2016/Melbourne_Datathon_2016_Kaggle')
rm(list=ls());gc()
load('../data/model/total.RData')
# jobs_search <- read.delim('../data/all/job_searches_all.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
total <- total[,c('job_id','class_id', 'hat')]; gc()
# unique(total[,c('class_id','class_description')])
order_id <- total$job_id
#######################
### Tgt user clicks ###
#######################
jobs_click <- read.delim('../data_new/job_clicks_all_V2.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
# jobs_click <- read.delim('../data/all/job_clicks_all.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
job_click_pct <- merge(jobs_click[,c('job_id','user_id')], total[, c('job_id', 'class_id', 'hat')], all.x = T, all.y = F, by = 'job_id')
for(c in unique(total$class_id)[!is.na(unique(total$class_id))]){
feat_name <- paste0('usr_click_',c)
cat(paste0('start creating... ', feat_name, ' \n'))
tgt_user_id <- unique(job_click_pct[job_click_pct$class_id == c,'user_id'])
job_click_pct$tgt_user_num <- ifelse(job_click_pct$user_id %in% tgt_user_id, 1,0)
tgt_user_num <- table(job_click_pct[job_click_pct$tgt_user_num > 0, 'job_id'])
tgt_user_num <- cbind(job_id = as.numeric(names(tgt_user_num)), clicks = as.numeric(tgt_user_num))
colnames(tgt_user_num) <- c('job_id', feat_name)
# save(tgt_user_num, file = '../user_click_freq.RData')
tgt_user_click <- merge(total[,c('job_id','class_id', 'hat')], tgt_user_num, all.x = T, all.y = F, sort = F)
tgt_user_click[is.na(tgt_user_click[,feat_name]), feat_name] <- 0
tgt_user_click <- tgt_user_click[order(match(tgt_user_click$job_id,order_id)),]
# total <- total[order(match(total$job_id,order_id)),]
total <- cbind(total, tgt_user_click[,feat_name])
colnames(total) <- c(colnames(total)[-length(colnames(total))], feat_name)
cat(paste0(feat_name, ' finished. # NA: ', table(is.na(tgt_user_click[,feat_name])), '. Range of clicks: ',
range(tgt_user_click[,feat_name])[1], ' ', range(tgt_user_click[,feat_name])[2], '. \n'))
}
head(total)
tail(total)
head(total, 20)
save(total, file = '../data_new/user_click_freq.RData')
table(is.na(total))
table(is.na(total[,2]))
table(is.na(total[,3]))
table(is.na(total[,4]))
dim(total)
ncol(total)
total$usr_click_total <- rowSums(total[,4:ncol(total)])
head(total)
table(total$usr_click_total)
total[,4]/total$usr_click_total
range(total[,4]/total$usr_click_total)
range(total[,4]/total$usr_click_total, na.rm = T)
is.na(total[,4]/total$usr_click_total)
for(i in 4:33){
pct <- total[,i]/total$usr_click_total
pct[is.na(pct)] <- 0
total[,i] <- pct
}
head(total)
total$usr_click_6076
rowSums(total[,4:33]
)
tgt_user_click <- total
save(tgt_user_click, file = '../data_new/user_click_freq_pct.RData')
head(tgt_user_click)
c = unique(total$class_id)[!is.na(unique(total$class_id))][1]
feat_name <- paste0('usr_imprs_',c)
cat(paste0('start creating... ', feat_name, ' \n'))
setwd('/Users/ivanliu/Downloads/datathon2016/Melbourne_Datathon_2016_Kaggle')
rm(list=ls());gc()
load('../data/model/total.RData')
# jobs_search <- read.delim('../data/all/job_searches_all.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
total <- total[,c('job_id','class_id', 'hat')]; gc()
# unique(total[,c('class_id','class_description')])
order_id <- total$job_id
jobs_impressions <- read.delim('../data_new/job_impressions_all_V2',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
job_impr_pct <- merge(jobs_impressions[,c('job_id','session_id')], total[, c('job_id', 'class_id', 'hat')], all.x = T, all.y = F, by = 'job_id')
for(c in unique(total$class_id)[!is.na(unique(total$class_id))]){
feat_name <- paste0('usr_imprs_',c)
cat(paste0('start creating... ', feat_name, ' \n'))
tgt_impr_id <- unique(job_impr_pct[job_impr_pct$class_id == c,'session_id'])
job_impr_pct$tgt_impr_num <- ifelse(job_impr_pct$session_id %in% tgt_impr_id, 1,0)
tgt_impr_num <- table(job_impr_pct[job_impr_pct$tgt_impr_num > 0, 'job_id'])
tgt_impr_num <- cbind(job_id = as.numeric(names(tgt_impr_num)), impressions = as.numeric(tgt_impr_num))
colnames(tgt_impr_num) <- c('job_id', feat_name)
tgt_impr_cnt <- merge(total[,c('job_id','class_id', 'hat')], tgt_impr_num, all.x = T, all.y = F, sort = F)
tgt_impr_cnt[is.na(tgt_impr_cnt$impressions), feat_name] <- 0
tgt_impr_cnt <- tgt_impr_cnt[order(match(tgt_impr_cnt$job_id,order_id)),]
total <- cbind(total, tgt_impr_cnt[,feat_name])
colnames(total) <- c(colnames(total)[-length(colnames(total))], feat_name)
cat(paste0(feat_name, ' finished. # NA: ', table(is.na(tgt_impr_cnt[,feat_name])), '. Range of clicks: ',
range(tgt_impr_cnt[,feat_name])[1], ' ', range(tgt_impr_cnt[,feat_name])[2], '. \n'))
}
jobs_impressions <- read.delim('../data_new/job_impressions_all_V2',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
job_impr_pct <- merge(jobs_impressions[,c('job_id','session_id')], total[, c('job_id', 'class_id', 'hat')], all.x = T, all.y = F, by = 'job_id')
jobs_impressions <- read.delim('../data_new/job_impressions_all_V2',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
jobs_impressions <- read.delim('../data_new/job_impressions_all_V2.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
job_impr_pct <- merge(jobs_impressions[,c('job_id','session_id')], total[, c('job_id', 'class_id', 'hat')], all.x = T, all.y = F, by = 'job_id')
for(c in unique(total$class_id)[!is.na(unique(total$class_id))]){
feat_name <- paste0('usr_imprs_',c)
cat(paste0('start creating... ', feat_name, ' \n'))
tgt_impr_id <- unique(job_impr_pct[job_impr_pct$class_id == c,'session_id'])
job_impr_pct$tgt_impr_num <- ifelse(job_impr_pct$session_id %in% tgt_impr_id, 1,0)
tgt_impr_num <- table(job_impr_pct[job_impr_pct$tgt_impr_num > 0, 'job_id'])
tgt_impr_num <- cbind(job_id = as.numeric(names(tgt_impr_num)), impressions = as.numeric(tgt_impr_num))
colnames(tgt_impr_num) <- c('job_id', feat_name)
tgt_impr_cnt <- merge(total[,c('job_id','class_id', 'hat')], tgt_impr_num, all.x = T, all.y = F, sort = F)
tgt_impr_cnt[is.na(tgt_impr_cnt$impressions), feat_name] <- 0
tgt_impr_cnt <- tgt_impr_cnt[order(match(tgt_impr_cnt$job_id,order_id)),]
total <- cbind(total, tgt_impr_cnt[,feat_name])
colnames(total) <- c(colnames(total)[-length(colnames(total))], feat_name)
cat(paste0(feat_name, ' finished. # NA: ', table(is.na(tgt_impr_cnt[,feat_name])), '. Range of clicks: ',
range(tgt_impr_cnt[,feat_name])[1], ' ', range(tgt_impr_cnt[,feat_name])[2], '. \n'))
}
warnings()
setwd('/Users/ivanliu/Downloads/datathon2016/Melbourne_Datathon_2016_Kaggle')
rm(list=ls());gc()
load('../data/model/total.RData')
total <- total[,c('job_id','class_id', 'hat')]; gc()
order_id <- total$job_id
jobs_impressions <- read.delim('../data_new/job_impressions_all_V2.csv',header = TRUE,na.strings = "",stringsAsFactors=FALSE)
job_impr_pct <- merge(jobs_impressions[,c('job_id','session_id')], total[, c('job_id', 'class_id', 'hat')], all.x = T, all.y = F, by = 'job_id')
for(c in unique(total$class_id)[!is.na(unique(total$class_id))]){
feat_name <- paste0('usr_imprs_',c)
cat(paste0('start creating... ', feat_name, ' \n'))
tgt_impr_id <- unique(job_impr_pct[job_impr_pct$class_id == c,'session_id'])
job_impr_pct$tgt_impr_num <- ifelse(job_impr_pct$session_id %in% tgt_impr_id, 1,0)
tgt_impr_num <- table(job_impr_pct[job_impr_pct$tgt_impr_num > 0, 'job_id'])
tgt_impr_num <- cbind(job_id = as.numeric(names(tgt_impr_num)), impressions = as.numeric(tgt_impr_num))
colnames(tgt_impr_num) <- c('job_id', feat_name)
tgt_impr_cnt <- merge(total[,c('job_id','class_id', 'hat')], tgt_impr_num, all.x = T, all.y = F, sort = F)
tgt_impr_cnt[is.na(tgt_impr_cnt[,feat_name]), feat_name] <- 0
tgt_impr_cnt <- tgt_impr_cnt[order(match(tgt_impr_cnt$job_id,order_id)),]
total <- cbind(total, tgt_impr_cnt[,feat_name])
colnames(total) <- c(colnames(total)[-length(colnames(total))], feat_name)
cat(paste0(feat_name, ' finished. # NA: ', table(is.na(tgt_impr_cnt[,feat_name])), '. Range of clicks: ',
range(tgt_impr_cnt[,feat_name])[1], ' ', range(tgt_impr_cnt[,feat_name])[2], '. \n'))
}
save(total, file = '../data_new/tgt_impr_cnt.RData')
head(total)
table(is.na(total[,3:33]))
dim(total)
total$tgt_impr_total <- rowSums(total[,4:ncol(total)])
for(i in 4:33){
pct <- total[,i]/total$tgt_impr_total
pct[is.na(pct)] <- 0
total[,i] <- pct
}
tgt_impr_cnt <- total
save(tgt_impr_cnt, file = '../data_new/tgt_impr_cnt_pct.RData')
head(tgt_impr_cnt)
setwd('/Users/ivanliu/Downloads/datathon2016/Melbourne_Datathon_2016_Kaggle')
rm(list=ls());gc()
load('../data/model/total.RData')
for(c in unique(total$class_id)[!is.na(unique(total$class_id))]){
cat(c, ' ' , mean(total[total$class_id == c, 'salary_min']), ' ', mean(total[total$class_id == c, 'salary_max']))
}
for(c in unique(total$class_id)[!is.na(unique(total$class_id))]){
cat(c, ' ' , mean(total[total$class_id == c, 'salary_min'], na.rm = T), ' ', mean(total[total$class_id == c, 'salary_max'], na.rm = T),  '\n')
}
avg_salary <- data.frame(class_id = 0, min_salary = 0, max_salary = 0, var_salary = 0)
avg_salary
mean(total[total$class_id == c, 'salary_max'] - total[total$class_id == c, 'salary_min'], na.rm = T)
avg_salary <- data.frame(class_id = 0, min_salary = 0, max_salary = 0, var_salary = 0)
for(c in unique(total$class_id)[!is.na(unique(total$class_id))]){
cat(c, ' ' , mean(total[total$class_id == c, 'salary_min'], na.rm = T), ' ', mean(total[total$class_id == c, 'salary_max'], na.rm = T),  '\n')
new_record <- c(c, mean(total[total$class_id == c, 'salary_min'], na.rm = T), mean(total[total$class_id == c, 'salary_max'], na.rm = T),
mean(total[total$class_id == c, 'salary_max'] - total[total$class_id == c, 'salary_min'], na.rm = T))
avg_salary <- rbind(avg_salary, new_record)
}
head(avg_salary)
avg_salary
avg_salary <- avg_salary[-1,]
avg_salary
save(avg_salary, file = '../data_new/avg_salary.RData')
