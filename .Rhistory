cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
install.packages('RODBC')
install.packages("RODBC")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
library(RODBC)
odbcDataSources()
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
odbcDriverConnect()
odbcDataSources()
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
#load ODBC library
library(RODBC)
odbcDataSources()
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
require(Rserve)
Rserve()
Rserve()
install.packages(c("boot", "gtools", "manipulate"))
head(train)
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC);require(ROCR)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
install.packages("manipulate")
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
ound(cor(iris[,1:4]), 2)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
pc
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3])#, col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
plot3d(pc$scores[,1:3], col=iris$Species, main="actual species")
with(iris, table(cluster, Species))
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
A <- matrix(c(1,2,3,4),nrow = 2, byrow = T)
B <- matrix(c(3,4,5,6),nrow = 2, byrow = T)
a <- c(1,2)
b <- c(2,3)
diag(10)
A
B
A*B
A%*%B
A%o%B # AB' A%*%t(B)
crossprod(A,B) # A'B  t(A)%*%A
crossprod(A) # A'A
b
solve(A,b) # A%*%solve(A,b)
solve(A,a) # A%*%solve(A,b)
a <- c(1200:1300)
a
b <- seq(15,100,5)
b
a/b
c <- a/b
c
a/15
apply(b, f(x) a/x)
apply(b, f(x){a/x})
sapply(b, f(x){a/x})
sapply(b, f(x){a/x})
lapply(b, f(x){a/x})
lapply(b, f(x)a/x)
lapply(b, f(x) a/x)
lapply(b,
f(x){
a/x
}
)
?sapply
b
sapply(b, a/x)
sapply(b, mean)
sapply(b, function(x) a/x)
a
x <− c ( 9 : 2 0 , 1 : 5 , 3 : 7 , 0 : 8 )
x <- c( 9 : 2 0 , 1 : 5 , 3 : 7 , 0 : 8 )
x <- c(9:20,1:5,3:7,0:8)
x
(xu<-x[!duplicated(x)])
unique ( x ) # i s more e f f i c i e n t
x[!duplicated(x)]
gc()
setwd('/Users/ivanliu/Downloads/datathon2016/Melbourne_Datathon_2016_Kaggle')
rm(list=ls());gc()
library(Matrix)
load('../data/model/total.RData')
source('./rscripts/a.preprocess_func.R')
### 1.TF/IDF features - title, abstract, raw_job_type, raw_location
# text_vector <- paste0(total$title, '. ', total$abstract, '. ', total$raw_job_type, '. ', total$raw_location)
# dtm_all <- tfidf_func(text_vector, ngrams = 1, minDocFreq = 2, wordLengths = 3, wordLengths_max = 20, idf = TRUE);
# save(dtm_all, file='../data_new/dtm_all.RData'); dim(dtm_all)
# load('../data_new/dtm_all.RData')
# dtm_all <- removeSparseTerms(dtm_all, 1 - 3/nrow(dtm_all))
# bow_names <- colnames(dtm_all)
# dtm_all <- sparseMatrix(dtm_all$i,dtm_all$j,x=dtm_all$v,dimnames = list(NULL,bow_names))
# dim(dtm_all)
text_vector <- total$title
dtm_title <- tfidf_func(text_vector, ngrams = 2, minDocFreq = 2, wordLengths = 2, wordLengths_max = 80, idf = T);
# dtm_title <- removeSparseTerms(dtm_title, 1 - 3/nrow(dtm_title))
bow_names <- paste0('bi_',colnames(dtm_title))
dtm_title <- sparseMatrix(dtm_title$i,dtm_title$j,x=dtm_title$v,dimnames = list(NULL,bow_names))
dim(dtm_title)
title_key_words_cnt <- rowSums(dtm_title >0)
text_vector <- total$abstract
dtm_abstract <- tfidf_func(text_vector, ngrams = 2, minDocFreq = 2, wordLengths = 2, wordLengths_max = 80, idf = T)
# dtm_abstract <- removeSparseTerms(dtm_abstract, 1 - 3/nrow(dtm_abstract))
bow_names <- paste0('bi_abs_',colnames(dtm_abstract))
dtm_abstract <- sparseMatrix(dtm_abstract$i,dtm_abstract$j,x=dtm_abstract$v,dimnames = list(NULL,bow_names))
dim(dtm_abstract)
abs_key_words_cnt <- rowSums(dtm_abstract >0)
text_vector <- total$raw_job_type
dtm_job_type <- tfidf_func(text_vector, ngrams = 2, minDocFreq = 2,wordLengths = 2, wordLengths_max = 80, idf = T);
# dtm_job_type <- removeSparseTerms(dtm_job_type, 1 - 3/nrow(dtm_job_type))
bow_names <- paste0('bi_job_',colnames(dtm_job_type))
dtm_job_type <- sparseMatrix(dtm_job_type$i,dtm_job_type$j,x=dtm_job_type$v,dimnames = list(NULL,bow_names))
dim(dtm_job_type)
type_key_words_cnt <- rowSums(dtm_job_type >0)
text_vector <- total$raw_location
dtm_location <- tfidf_func(text_vector, ngrams = 2, minDocFreq = 2, wordLengths = 2, wordLengths_max = 80, idf = T);
# dtm_location <- removeSparseTerms(dtm_location, 1 - 3/nrow(dtm_location))
bow_names <- paste0('bi_loc_',colnames(dtm_location))
dtm_location <- sparseMatrix(dtm_location$i,dtm_location$j,x=dtm_location$v,dimnames = list(NULL,bow_names))
dim(dtm_location)
loc_key_words_cnt <- rowSums(dtm_location >0)
dtm_title_bi <- dtm_title
dtm_abstract_bi <- dtm_abstract
dtm_job_type_bi <- dtm_job_type
dtm_location_bi <- dtm_location
title_key_words_cnt_bi <- title_key_words_cnt
abs_key_words_cnt_bi <- abs_key_words_cnt
type_key_words_cnt_bi <- type_key_words_cnt
loc_key_words_cnt_bi <- loc_key_words_cnt
save(dtm_title_bi,
dtm_abstract_bi,
dtm_job_type_bi,
dtm_location_bi,
title_key_words_cnt_bi,
abs_key_words_cnt_bi,
type_key_words_cnt_bi,
loc_key_words_cnt_bi,
file = '../data_new/idf_bigrams_full_20160501.RData'
)
load('../data_new/idf_unigrams_full_20160501.RData')
# idf_unigrams_full_20160501.RData
# idf_bigrams_full_20160501.RData
### 2. binary features - salary_type
salary_type <- ifelse(total$salary_type == 'h', 0, 1)
salary_type[is.na(salary_type)] <- 1
### 3. numerical features - salary_min, salary_max
load('../data_new/avg_salary.RData')
feat_list <- c()
for(c in unique(total$class_id)[!is.na(unique(total$class_id))]){
feat_name <- paste0('min_salary_ratio_',c)
total[,feat_name] <- total[,'salary_min'] / avg_salary[avg_salary$class_id == c,'min_salary']
total[is.na(total[,feat_name]),feat_name] <- 1
feat_list <- c(feat_list, feat_name)
}
for(c in unique(total$class_id)[!is.na(unique(total$class_id))]){
feat_name <- paste0('max_salary_ratio_',c)
total[,feat_name] <- total[,'salary_max'] / avg_salary[avg_salary$class_id == c,'max_salary']
total[is.na(total[,feat_name]),feat_name] <- 1
feat_list <- c(feat_list, feat_name)
}
for(c in unique(total$class_id)[!is.na(unique(total$class_id))]){
feat_name <- paste0('var_salary_ratio_',c)
total[,feat_name] <- (total[,'salary_max'] - total[,'salary_min']) / avg_salary[avg_salary$class_id == c,'var_salary']
total[is.na(total[,feat_name]),feat_name] <- 1
feat_list <- c(feat_list, feat_name)
}
salary_features <- total[,feat_list]
### 4. clicks & impression freq
load('../data_new/user_click_freq_pct.RData')
load('../data_new/tgt_impr_cnt_pct.RData')
tgt_impr_all_cnt <- rowSums(tgt_impr_cnt[,5:34] > 0)
tgt_user_click_cnt <- rowSums(tgt_user_click[,5:34] > 0)
### 5. Geo Info
load('../data_new/geo_info_dummy.RData')
# head(geo_info_dummy[,2:61])
### 6. Key word counts
# load('../data_new/h.key_words_counts.RData')
### 5. combine model data
# remove features not in test
# rm_feat <- colSums(dtm_all[total[,'hat']==-1,])
# dtm_all <- dtm_all[,rm_feat!=0]
rm_feat <- colSums(dtm_title[total[,'hat']==-1,])
dtm_title <- dtm_title[,rm_feat!=0]
rm_feat <- colSums(dtm_abstract[total[,'hat']==-1,])
dtm_abstract <- dtm_abstract[,rm_feat!=0]
rm_feat <- colSums(dtm_job_type[total[,'hat']==-1,])
dtm_job_type <- dtm_job_type[,rm_feat!=0]
rm_feat <- colSums(dtm_location[total[,'hat']==-1,])
dtm_location <- dtm_location[,rm_feat!=0]
rm_feat <- colSums(dtm_title_bi[total[,'hat']==-1,])
dtm_title_bi <- dtm_title_bi[,rm_feat!=0]
rm_feat <- colSums(dtm_abstract_bi[total[,'hat']==-1,])
dtm_abstract_bi <- dtm_abstract_bi[,rm_feat!=0]
rm_feat <- colSums(dtm_job_type_bi[total[,'hat']==-1,])
dtm_job_type_bi <- dtm_job_type_bi[,rm_feat!=0]
rm_feat <- colSums(dtm_location_bi[total[,'hat']==-1,])
dtm_location_bi <- dtm_location_bi[,rm_feat!=0]
# 218
pt3 <- as.matrix(cbind(salary_type = salary_type,
salary_features,
tgt_impr_cnt[,5:34],
tgt_impr_all_cnt = tgt_impr_all_cnt,
tgt_user_click[,5:34],
tgt_user_click_cnt = tgt_user_click_cnt,
title_key_words_cnt = scale(title_key_words_cnt,center = T, scale = T),
abs_key_words_cnt = scale(abs_key_words_cnt,center = T, scale = T),
type_key_words_cnt = scale(type_key_words_cnt,center = T, scale = T),
loc_key_words_cnt = scale(loc_key_words_cnt,center = T, scale = T),
title_key_words_cnt_bi = scale(title_key_words_cnt_bi,center = T, scale = T),
abs_key_words_cnt_bi = scale(abs_key_words_cnt_bi,center = T, scale = T),
type_key_words_cnt_bi = scale(type_key_words_cnt_bi,center = T, scale = T),
loc_key_words_cnt_bi = scale(loc_key_words_cnt_bi,center = T, scale = T),
geo_info_dummy[,2:61]))
pt3 <- as.matrix(cbind(salary_type = salary_type,
salary_features,
tgt_impr_cnt[,5:34],
tgt_impr_all_cnt = tgt_impr_all_cnt,
tgt_user_click[,5:34],
tgt_user_click_cnt = tgt_user_click_cnt,
title_key_words_cnt = title_key_words_cnt,
abs_key_words_cnt = abs_key_words_cnt,
type_key_words_cnt = type_key_words_cnt,
loc_key_words_cnt = loc_key_words_cnt,
title_key_words_cnt_bi = title_key_words_cnt_bi,
abs_key_words_cnt_bi = abs_key_words_cnt_bi,
type_key_words_cnt_bi = type_key_words_cnt_bi,
loc_key_words_cnt_bi = loc_key_words_cnt_bi,
geo_info_dummy[,2:61]))
library(caret)
pre <- preProcess(pt3, method = c("center", "scale"))
pt3_scale <- predict(pre, pt3)
all <- cbind(job_id = total$job_id,
dtm_title,
dtm_abstract,
dtm_job_type,
dtm_location,
dtm_title_bi,
dtm_abstract_bi,
dtm_job_type_bi,
dtm_location_bi,
pt3_scale,
obj_hat = total$hat
)
dim(all)
extra_feature <- colnames(pt3)
train <- all[all[,'obj_hat'] != -1, ]
test <- all[all[,'obj_hat'] == -1, ]
save(train,test,extra_feature,file ='../data_new/model_bigram_idf_20160501_scale_full.RData')
